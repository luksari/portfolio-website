{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/smoothscroll/smoothscroll.js","node_modules/svg-injector/svg-injector.js","source/scripts/index.js","source/scripts/menu.js","source/scripts/utils.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","root","smoothScroll","define","amd","this","window","document","querySelectorAll","pageYOffset","history","pushState","position","start","end","elapsed","duration","easeInOutCubic","el","callback","context","scrollTop","parseInt","element","nodeName","getBoundingClientRect","top","getTop","clock","Date","now","requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","fn","setTimeout","step","scroll","addEventListener","internal","ev","defaultPrevented","preventDefault","location","hash","node","getElementById","substring","replace","id","isLocal","protocol","hasSvgSupport","implementation","hasFeature","forEach","Array","prototype","scope","TypeError","len","svgCache","injectCount","injectedElements","requestQueue","ranScripts","cloneSvg","sourceSvg","cloneNode","queueRequest","url","push","injectElement","evalScripts","pngFallback","imgUrl","getAttribute","test","indexOf","setAttribute","undefined","SVGSVGElement","XMLHttpRequest","httpRequest","onreadystatechange","readyState","status","responseXML","statusText","Document","documentElement","DOMParser","Function","xmlDoc","parser","parseFromString","responseText","getElementsByTagName","index","processRequestQueue","open","overrideMimeType","send","loadSvg","svg","imgId","imgTitle","classMerge","concat","join","list","split","out","hasOwnProperty","unshift","uniqueClasses","imgStyle","imgData","filter","attributes","at","name","dataAttr","value","elementDefs","properties","currentId","newId","iriElementsAndProperties","clipPath","color-profile","cursor","linearGradient","marker","mask","pattern","radialGradient","Object","keys","key","elementsLen","referencingElements","property","j","referencingElementLen","removeAttribute","script","scriptType","scripts","scriptsToEval","k","scriptsLen","innerText","textContent","removeChild","scriptsToEvalLen","styleTags","styleTag","parentNode","replaceChild","perElementFallback","pop","SVGInjector","elements","options","done","eachCallback","each","elementsLoaded","_menu","_utils","onload","svgInject","delegateMenu","enableSmoothScroll","toggleMenu","menuList","burger","classList","toggle","contains","menu","target","parentElement","querySelector","_smoothscroll2","default","mySVGsToInject","_svgInjector2","style","display"],"mappings":"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","file":"index.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function (root, smoothScroll) {\n  'use strict';\n\n  // Support RequireJS and CommonJS/NodeJS module formats.\n  // Attach smoothScroll to the `window` when executed as a <script>.\n\n  // RequireJS\n  if (typeof define === 'function' && define.amd) {\n    define(smoothScroll);\n\n  // CommonJS\n  } else if (typeof exports === 'object' && typeof module === 'object') {\n    module.exports = smoothScroll();\n\n  } else {\n    root.smoothScroll = smoothScroll();\n  }\n\n})(this, function(){\n'use strict';\n\n// Do not initialize smoothScroll when running server side, handle it in client:\nif (typeof window !== 'object') return;\n\n// We do not want this script to be applied in browsers that do not support those\n// That means no smoothscroll on IE9 and below.\nif(document.querySelectorAll === void 0 || window.pageYOffset === void 0 || history.pushState === void 0) { return; }\n\n// Get the top position of an element in the document\nvar getTop = function(element, start) {\n    // return value of html.getBoundingClientRect().top ... IE : 0, other browsers : -pageYOffset\n    if(element.nodeName === 'HTML') return -start\n    return element.getBoundingClientRect().top + start\n}\n// ease in out function thanks to:\n// http://blog.greweb.fr/2012/02/bezier-curve-based-easing-functions-from-concept-to-implementation/\nvar easeInOutCubic = function (t) { return t<.5 ? 4*t*t*t : (t-1)*(2*t-2)*(2*t-2)+1 }\n\n// calculate the scroll position we should be in\n// given the start and end point of the scroll\n// the time elapsed from the beginning of the scroll\n// and the total duration of the scroll (default 500ms)\nvar position = function(start, end, elapsed, duration) {\n    if (elapsed > duration) return end;\n    return start + (end - start) * easeInOutCubic(elapsed / duration); // <-- you can change the easing funtion there\n    // return start + (end - start) * (elapsed / duration); // <-- this would give a linear scroll\n}\n\n// we use requestAnimationFrame to be called by the browser before every repaint\n// if the first argument is an element then scroll to the top of this element\n// if the first argument is numeric then scroll to this location\n// if the callback exist, it is called when the scrolling is finished\n// if context is set then scroll that element, else scroll window\nvar smoothScroll = function(el, duration, callback, context){\n    duration = duration || 500;\n    context = context || window;\n    var start = context.scrollTop || window.pageYOffset;\n\n    if (typeof el === 'number') {\n      var end = parseInt(el);\n    } else {\n      var end = getTop(el, start);\n    }\n\n    var clock = Date.now();\n    var requestAnimationFrame = window.requestAnimationFrame ||\n        window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame ||\n        function(fn){window.setTimeout(fn, 15);};\n\n    var step = function(){\n        var elapsed = Date.now() - clock;\n        if (context !== window) {\n          context.scrollTop = position(start, end, elapsed, duration);\n        }\n        else {\n          window.scroll(0, position(start, end, elapsed, duration));\n        }\n\n        if (elapsed > duration) {\n            if (typeof callback === 'function') {\n                callback(el);\n            }\n        } else {\n            requestAnimationFrame(step);\n        }\n    }\n    step();\n}\n\nvar linkHandler = function(ev) {\n    if (!ev.defaultPrevented) {\n        ev.preventDefault();\n\n        if (location.hash !== this.hash) window.history.pushState(null, null, this.hash)\n        // using the history api to solve issue #1 - back doesn't work\n        // most browser don't update :target when the history api is used:\n        // THIS IS A BUG FROM THE BROWSERS.\n        // change the scrolling duration in this call\n        var node = document.getElementById(this.hash.substring(1))\n        if (!node) return; // Do not scroll to non-existing node\n\n        smoothScroll(node, 500, function (el) {\n            location.replace('#' + el.id)\n            // this will cause the :target to be activated.\n        });\n    }\n}\n\n// We look for all the internal links in the documents and attach the smoothscroll function\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    var internal = document.querySelectorAll('a[href^=\"#\"]:not([href=\"#\"])'), a;\n    for(var i=internal.length; a=internal[--i];){\n        a.addEventListener(\"click\", linkHandler, false);\n    }\n});\n\n// return smoothscroll API\nreturn smoothScroll;\n\n});\n","/**\n * SVGInjector v1.1.3 - Fast, caching, dynamic inline SVG DOM injection library\n * https://github.com/iconic/SVGInjector\n *\n * Copyright (c) 2014-2015 Waybury <hello@waybury.com>\n * @license MIT\n */\n\n(function (window, document) {\n\n  'use strict';\n\n  // Environment\n  var isLocal = window.location.protocol === 'file:';\n  var hasSvgSupport = document.implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');\n\n  function uniqueClasses(list) {\n    list = list.split(' ');\n\n    var hash = {};\n    var i = list.length;\n    var out = [];\n\n    while (i--) {\n      if (!hash.hasOwnProperty(list[i])) {\n        hash[list[i]] = 1;\n        out.unshift(list[i]);\n      }\n    }\n\n    return out.join(' ');\n  }\n\n  /**\n   * cache (or polyfill for <= IE8) Array.forEach()\n   * source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\n   */\n  var forEach = Array.prototype.forEach || function (fn, scope) {\n    if (this === void 0 || this === null || typeof fn !== 'function') {\n      throw new TypeError();\n    }\n\n    /* jshint bitwise: false */\n    var i, len = this.length >>> 0;\n    /* jshint bitwise: true */\n\n    for (i = 0; i < len; ++i) {\n      if (i in this) {\n        fn.call(scope, this[i], i, this);\n      }\n    }\n  };\n\n  // SVG Cache\n  var svgCache = {};\n\n  var injectCount = 0;\n  var injectedElements = [];\n\n  // Request Queue\n  var requestQueue = [];\n\n  // Script running status\n  var ranScripts = {};\n\n  var cloneSvg = function (sourceSvg) {\n    return sourceSvg.cloneNode(true);\n  };\n\n  var queueRequest = function (url, callback) {\n    requestQueue[url] = requestQueue[url] || [];\n    requestQueue[url].push(callback);\n  };\n\n  var processRequestQueue = function (url) {\n    for (var i = 0, len = requestQueue[url].length; i < len; i++) {\n      // Make these calls async so we avoid blocking the page/renderer\n      /* jshint loopfunc: true */\n      (function (index) {\n        setTimeout(function () {\n          requestQueue[url][index](cloneSvg(svgCache[url]));\n        }, 0);\n      })(i);\n      /* jshint loopfunc: false */\n    }\n  };\n\n  var loadSvg = function (url, callback) {\n    if (svgCache[url] !== undefined) {\n      if (svgCache[url] instanceof SVGSVGElement) {\n        // We already have it in cache, so use it\n        callback(cloneSvg(svgCache[url]));\n      }\n      else {\n        // We don't have it in cache yet, but we are loading it, so queue this request\n        queueRequest(url, callback);\n      }\n    }\n    else {\n\n      if (!window.XMLHttpRequest) {\n        callback('Browser does not support XMLHttpRequest');\n        return false;\n      }\n\n      // Seed the cache to indicate we are loading this URL already\n      svgCache[url] = {};\n      queueRequest(url, callback);\n\n      var httpRequest = new XMLHttpRequest();\n\n      httpRequest.onreadystatechange = function () {\n        // readyState 4 = complete\n        if (httpRequest.readyState === 4) {\n\n          // Handle status\n          if (httpRequest.status === 404 || httpRequest.responseXML === null) {\n            callback('Unable to load SVG file: ' + url);\n\n            if (isLocal) callback('Note: SVG injection ajax calls do not work locally without adjusting security setting in your browser. Or consider using a local webserver.');\n\n            callback();\n            return false;\n          }\n\n          // 200 success from server, or 0 when using file:// protocol locally\n          if (httpRequest.status === 200 || (isLocal && httpRequest.status === 0)) {\n\n            /* globals Document */\n            if (httpRequest.responseXML instanceof Document) {\n              // Cache it\n              svgCache[url] = httpRequest.responseXML.documentElement;\n            }\n            /* globals -Document */\n\n            // IE9 doesn't create a responseXML Document object from loaded SVG,\n            // and throws a \"DOM Exception: HIERARCHY_REQUEST_ERR (3)\" error when injected.\n            //\n            // So, we'll just create our own manually via the DOMParser using\n            // the the raw XML responseText.\n            //\n            // :NOTE: IE8 and older doesn't have DOMParser, but they can't do SVG either, so...\n            else if (DOMParser && (DOMParser instanceof Function)) {\n              var xmlDoc;\n              try {\n                var parser = new DOMParser();\n                xmlDoc = parser.parseFromString(httpRequest.responseText, 'text/xml');\n              }\n              catch (e) {\n                xmlDoc = undefined;\n              }\n\n              if (!xmlDoc || xmlDoc.getElementsByTagName('parsererror').length) {\n                callback('Unable to parse SVG file: ' + url);\n                return false;\n              }\n              else {\n                // Cache it\n                svgCache[url] = xmlDoc.documentElement;\n              }\n            }\n\n            // We've loaded a new asset, so process any requests waiting for it\n            processRequestQueue(url);\n          }\n          else {\n            callback('There was a problem injecting the SVG: ' + httpRequest.status + ' ' + httpRequest.statusText);\n            return false;\n          }\n        }\n      };\n\n      httpRequest.open('GET', url);\n\n      // Treat and parse the response as XML, even if the\n      // server sends us a different mimetype\n      if (httpRequest.overrideMimeType) httpRequest.overrideMimeType('text/xml');\n\n      httpRequest.send();\n    }\n  };\n\n  // Inject a single element\n  var injectElement = function (el, evalScripts, pngFallback, callback) {\n\n    // Grab the src or data-src attribute\n    var imgUrl = el.getAttribute('data-src') || el.getAttribute('src');\n\n    // We can only inject SVG\n    if (!(/\\.svg/i).test(imgUrl)) {\n      callback('Attempted to inject a file with a non-svg extension: ' + imgUrl);\n      return;\n    }\n\n    // If we don't have SVG support try to fall back to a png,\n    // either defined per-element via data-fallback or data-png,\n    // or globally via the pngFallback directory setting\n    if (!hasSvgSupport) {\n      var perElementFallback = el.getAttribute('data-fallback') || el.getAttribute('data-png');\n\n      // Per-element specific PNG fallback defined, so use that\n      if (perElementFallback) {\n        el.setAttribute('src', perElementFallback);\n        callback(null);\n      }\n      // Global PNG fallback directoriy defined, use the same-named PNG\n      else if (pngFallback) {\n        el.setAttribute('src', pngFallback + '/' + imgUrl.split('/').pop().replace('.svg', '.png'));\n        callback(null);\n      }\n      // um...\n      else {\n        callback('This browser does not support SVG and no PNG fallback was defined.');\n      }\n\n      return;\n    }\n\n    // Make sure we aren't already in the process of injecting this element to\n    // avoid a race condition if multiple injections for the same element are run.\n    // :NOTE: Using indexOf() only _after_ we check for SVG support and bail,\n    // so no need for IE8 indexOf() polyfill\n    if (injectedElements.indexOf(el) !== -1) {\n      return;\n    }\n\n    // Remember the request to inject this element, in case other injection\n    // calls are also trying to replace this element before we finish\n    injectedElements.push(el);\n\n    // Try to avoid loading the orginal image src if possible.\n    el.setAttribute('src', '');\n\n    // Load it up\n    loadSvg(imgUrl, function (svg) {\n\n      if (typeof svg === 'undefined' || typeof svg === 'string') {\n        callback(svg);\n        return false;\n      }\n\n      var imgId = el.getAttribute('id');\n      if (imgId) {\n        svg.setAttribute('id', imgId);\n      }\n\n      var imgTitle = el.getAttribute('title');\n      if (imgTitle) {\n        svg.setAttribute('title', imgTitle);\n      }\n\n      // Concat the SVG classes + 'injected-svg' + the img classes\n      var classMerge = [].concat(svg.getAttribute('class') || [], 'injected-svg', el.getAttribute('class') || []).join(' ');\n      svg.setAttribute('class', uniqueClasses(classMerge));\n\n      var imgStyle = el.getAttribute('style');\n      if (imgStyle) {\n        svg.setAttribute('style', imgStyle);\n      }\n\n      // Copy all the data elements to the svg\n      var imgData = [].filter.call(el.attributes, function (at) {\n        return (/^data-\\w[\\w\\-]*$/).test(at.name);\n      });\n      forEach.call(imgData, function (dataAttr) {\n        if (dataAttr.name && dataAttr.value) {\n          svg.setAttribute(dataAttr.name, dataAttr.value);\n        }\n      });\n\n      // Make sure any internally referenced clipPath ids and their\n      // clip-path references are unique.\n      //\n      // This addresses the issue of having multiple instances of the\n      // same SVG on a page and only the first clipPath id is referenced.\n      //\n      // Browsers often shortcut the SVG Spec and don't use clipPaths\n      // contained in parent elements that are hidden, so if you hide the first\n      // SVG instance on the page, then all other instances lose their clipping.\n      // Reference: https://bugzilla.mozilla.org/show_bug.cgi?id=376027\n\n      // Handle all defs elements that have iri capable attributes as defined by w3c: http://www.w3.org/TR/SVG/linking.html#processingIRI\n      // Mapping IRI addressable elements to the properties that can reference them:\n      var iriElementsAndProperties = {\n        'clipPath': ['clip-path'],\n        'color-profile': ['color-profile'],\n        'cursor': ['cursor'],\n        'filter': ['filter'],\n        'linearGradient': ['fill', 'stroke'],\n        'marker': ['marker', 'marker-start', 'marker-mid', 'marker-end'],\n        'mask': ['mask'],\n        'pattern': ['fill', 'stroke'],\n        'radialGradient': ['fill', 'stroke']\n      };\n\n      var element, elementDefs, properties, currentId, newId;\n      Object.keys(iriElementsAndProperties).forEach(function (key) {\n        element = key;\n        properties = iriElementsAndProperties[key];\n\n        elementDefs = svg.querySelectorAll('defs ' + element + '[id]');\n        for (var i = 0, elementsLen = elementDefs.length; i < elementsLen; i++) {\n          currentId = elementDefs[i].id;\n          newId = currentId + '-' + injectCount;\n\n          // All of the properties that can reference this element type\n          var referencingElements;\n          forEach.call(properties, function (property) {\n            // :NOTE: using a substring match attr selector here to deal with IE \"adding extra quotes in url() attrs\"\n            referencingElements = svg.querySelectorAll('[' + property + '*=\"' + currentId + '\"]');\n            for (var j = 0, referencingElementLen = referencingElements.length; j < referencingElementLen; j++) {\n              referencingElements[j].setAttribute(property, 'url(#' + newId + ')');\n            }\n          });\n\n          elementDefs[i].id = newId;\n        }\n      });\n\n      // Remove any unwanted/invalid namespaces that might have been added by SVG editing tools\n      svg.removeAttribute('xmlns:a');\n\n      // Post page load injected SVGs don't automatically have their script\n      // elements run, so we'll need to make that happen, if requested\n\n      // Find then prune the scripts\n      var scripts = svg.querySelectorAll('script');\n      var scriptsToEval = [];\n      var script, scriptType;\n\n      for (var k = 0, scriptsLen = scripts.length; k < scriptsLen; k++) {\n        scriptType = scripts[k].getAttribute('type');\n\n        // Only process javascript types.\n        // SVG defaults to 'application/ecmascript' for unset types\n        if (!scriptType || scriptType === 'application/ecmascript' || scriptType === 'application/javascript') {\n\n          // innerText for IE, textContent for other browsers\n          script = scripts[k].innerText || scripts[k].textContent;\n\n          // Stash\n          scriptsToEval.push(script);\n\n          // Tidy up and remove the script element since we don't need it anymore\n          svg.removeChild(scripts[k]);\n        }\n      }\n\n      // Run/Eval the scripts if needed\n      if (scriptsToEval.length > 0 && (evalScripts === 'always' || (evalScripts === 'once' && !ranScripts[imgUrl]))) {\n        for (var l = 0, scriptsToEvalLen = scriptsToEval.length; l < scriptsToEvalLen; l++) {\n\n          // :NOTE: Yup, this is a form of eval, but it is being used to eval code\n          // the caller has explictely asked to be loaded, and the code is in a caller\n          // defined SVG file... not raw user input.\n          //\n          // Also, the code is evaluated in a closure and not in the global scope.\n          // If you need to put something in global scope, use 'window'\n          new Function(scriptsToEval[l])(window); // jshint ignore:line\n        }\n\n        // Remember we already ran scripts for this svg\n        ranScripts[imgUrl] = true;\n      }\n\n      // :WORKAROUND:\n      // IE doesn't evaluate <style> tags in SVGs that are dynamically added to the page.\n      // This trick will trigger IE to read and use any existing SVG <style> tags.\n      //\n      // Reference: https://github.com/iconic/SVGInjector/issues/23\n      var styleTags = svg.querySelectorAll('style');\n      forEach.call(styleTags, function (styleTag) {\n        styleTag.textContent += '';\n      });\n\n      // Replace the image with the svg\n      el.parentNode.replaceChild(svg, el);\n\n      // Now that we no longer need it, drop references\n      // to the original element so it can be GC'd\n      delete injectedElements[injectedElements.indexOf(el)];\n      el = null;\n\n      // Increment the injected count\n      injectCount++;\n\n      callback(svg);\n    });\n  };\n\n  /**\n   * SVGInjector\n   *\n   * Replace the given elements with their full inline SVG DOM elements.\n   *\n   * :NOTE: We are using get/setAttribute with SVG because the SVG DOM spec differs from HTML DOM and\n   * can return other unexpected object types when trying to directly access svg properties.\n   * ex: \"className\" returns a SVGAnimatedString with the class value found in the \"baseVal\" property,\n   * instead of simple string like with HTML Elements.\n   *\n   * @param {mixes} Array of or single DOM element\n   * @param {object} options\n   * @param {function} callback\n   * @return {object} Instance of SVGInjector\n   */\n  var SVGInjector = function (elements, options, done) {\n\n    // Options & defaults\n    options = options || {};\n\n    // Should we run the scripts blocks found in the SVG\n    // 'always' - Run them every time\n    // 'once' - Only run scripts once for each SVG\n    // [false|'never'] - Ignore scripts\n    var evalScripts = options.evalScripts || 'always';\n\n    // Location of fallback pngs, if desired\n    var pngFallback = options.pngFallback || false;\n\n    // Callback to run during each SVG injection, returning the SVG injected\n    var eachCallback = options.each;\n\n    // Do the injection...\n    if (elements.length !== undefined) {\n      var elementsLoaded = 0;\n      forEach.call(elements, function (element) {\n        injectElement(element, evalScripts, pngFallback, function (svg) {\n          if (eachCallback && typeof eachCallback === 'function') eachCallback(svg);\n          if (done && elements.length === ++elementsLoaded) done(elementsLoaded);\n        });\n      });\n    }\n    else {\n      if (elements) {\n        injectElement(elements, evalScripts, pngFallback, function (svg) {\n          if (eachCallback && typeof eachCallback === 'function') eachCallback(svg);\n          if (done) done(1);\n          elements = null;\n        });\n      }\n      else {\n        if (done) done(0);\n      }\n    }\n  };\n\n  /* global module, exports: true, define */\n  // Node.js or CommonJS\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = exports = SVGInjector;\n  }\n  // AMD support\n  else if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return SVGInjector;\n    });\n  }\n  // Otherwise, attach to window as global\n  else if (typeof window === 'object') {\n    window.SVGInjector = SVGInjector;\n  }\n  /* global -module, -exports, -define */\n\n}(window, document));\n","import {delegateMenu} from './menu.js';\nimport {svgInject, enableSmoothScroll} from './utils.js'\n\n\nwindow.onload = () => {\n\nsvgInject();\ndelegateMenu();\nenableSmoothScroll();\n\n};\n","function toggleMenu() {\n  const menuList = document.querySelectorAll(\".menu__menu-list\");\n  const burger = document.querySelectorAll(\".menu__menu-icon\");\n\n  if (menuList && burger) {\n    menuList[0].classList.toggle('opened');\n    if (menuList[0].classList.contains('opened')) {\n      burger[0].setAttribute('src', 'svg/close.svg');\n    } else {\n      burger[0].setAttribute('src', 'svg/menu.svg');\n    }\n  }\n}\n\nexport function delegateMenu() {\n  const menu = document.querySelectorAll(\".page-header__menu\");\n  if (menu) {\n    menu[0].addEventListener('click', (e) => {\n      if (e.target && (e.target.classList.contains(\"menu__menu-button\") || (e.target.parentElement.classList.contains(\"menu__menu-button\")))) {\n        toggleMenu();\n      }\n      else if (e.target && (e.target.nodeName === \"A\" || e.target.parentElement.nodeName === \"LI\" || e.target.nodeName === \"IMG\")) {\n        toggleMenu();\n      }\n    }, false);\n  }\n}\n","import smoothScroll from 'smoothscroll';\nimport SVGInjector from 'svg-injector';\n\nexport function enableSmoothScroll() {\n  window.addEventListener('click', e => {\n    if (e.target && e.target.nodeName === \"A\") {\n      let id = e\n        .target\n        .getAttribute('href');\n      let element = document.querySelector(id);\n      smoothScroll(element, 1000);\n    }\n  });\n}\n\nexport function svgInject() {\n  const mySVGsToInject = document.querySelectorAll('img.svg');\n  SVGInjector(mySVGsToInject);\n  document.querySelectorAll(\".page-loader-wrapper\")[0].style.display = \"none\";\n}\n\n"]}